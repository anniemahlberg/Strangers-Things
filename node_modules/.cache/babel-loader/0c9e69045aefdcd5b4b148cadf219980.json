{"ast":null,"code":"var _jsxFileName = \"/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B';\n\nconst Messages = props => {\n  _s();\n\n  const {\n    token,\n    userName,\n    setPostID,\n    postID,\n    postArray,\n    setPostIndex\n  } = props;\n  const history = useHistory();\n\n  const getMessages = async () => {\n    try {\n      const messages = await fetch(`${API_URL}/users/me`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const messagesResults = await messages.json();\n      return messagesResults.data.messages;\n    } catch (err) {\n      console.error('Unable to fetch messages', err);\n    }\n  };\n\n  const renderMessages = messageList => {\n    let messageContainer = document.getElementById('message-container');\n    console.log(messageList);\n\n    if (!messageList || messageList.length === 0) {\n      messageContainer.innerHTML = \"No messages to display.\";\n    }\n\n    let messageContainerHTML = '';\n\n    for (let i = 0; i < messageList.length; i++) {\n      const message = messageList[i];\n      let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-post'>\n                    <button class=\"sm-view\" data-id=${message.post._id}>View Post: ${message.post.title}</button>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n      messageContainerHTML += messageHTML;\n    }\n\n    messageContainer.innerHTML = messageContainerHTML;\n    let viewPostButton = [...document.getElementsByClassName('sm-view')];\n\n    for (let j = 0; j < viewPostButton.length; j++) {\n      const button = viewPostButton[j];\n      button.addEventListener('click', async () => {\n        await setPostID(button.dataset.id);\n        goToPost();\n      });\n    }\n  };\n\n  const goToPost = () => {\n    console.log(postArray);\n\n    for (let k = 0; k < postArray.length; k++) {\n      let currentObject = postArray[k];\n      console.log(\"this is current object id: \", currentObject._id);\n\n      if (currentObject._id === postID) {\n        setPostIndex(k);\n        history.push('/viewPost');\n      }\n    }\n  };\n\n  const initialMessages = async () => {\n    const messages = await getMessages();\n    renderMessages(messages);\n  };\n\n  initialMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"message-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Messages, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useHistory","API_URL","Messages","props","token","userName","setPostID","postID","postArray","setPostIndex","history","getMessages","messages","fetch","headers","messagesResults","json","data","err","console","error","renderMessages","messageList","messageContainer","document","getElementById","log","length","innerHTML","messageContainerHTML","i","message","messageHTML","fromUser","username","post","_id","title","content","viewPostButton","getElementsByClassName","j","button","addEventListener","dataset","id","goToPost","k","currentObject","push","initialMessages"],"sources":["/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js"],"sourcesContent":["import { useHistory } from \"react-router-dom\";\n\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B'\n\nconst Messages = (props) => {\n    const { token, userName, setPostID, postID, postArray, setPostIndex } = props;\n    const history = useHistory();\n\n    const getMessages = async () => {\n        try {\n            const messages = await fetch(`${API_URL}/users/me`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },})\n            const messagesResults = await messages.json();\n            return messagesResults.data.messages;\n        } catch (err) {\n            console.error('Unable to fetch messages', err);\n        }\n    }\n\n    const renderMessages = (messageList) => {    \n        let messageContainer = document.getElementById('message-container')\n\n        console.log(messageList)\n\n        if (!messageList || messageList.length === 0) {\n            messageContainer.innerHTML = \"No messages to display.\"\n        }\n\n        let messageContainerHTML = '';\n        for (let i = 0; i < messageList.length; i++) {\n            const message = messageList[i];\n\n            let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-post'>\n                    <button class=\"sm-view\" data-id=${message.post._id}>View Post: ${message.post.title}</button>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n\n            messageContainerHTML += messageHTML;\n        }\n        messageContainer.innerHTML = messageContainerHTML;\n\n        let viewPostButton = [...document.getElementsByClassName('sm-view')]\n        for (let j = 0; j < viewPostButton.length; j++) {\n            const button = viewPostButton[j];\n            button.addEventListener('click', async () => {\n                await setPostID(button.dataset.id)\n                goToPost();\n            });\n        }\n\n    }\n\n    const goToPost = () => {\n        console.log(postArray)\n        for (let k = 0; k < postArray.length; k++) {\n            let currentObject = postArray[k]\n            console.log(\"this is current object id: \", currentObject._id)\n            if (currentObject._id === postID) {\n                setPostIndex(k)\n                history.push('/viewPost')\n            }\n        }\n    }\n\n    const initialMessages = async () => {\n        const messages = await getMessages();\n        renderMessages(messages)\n    }\n\n    initialMessages();\n\n    return (\n        <div id=\"message-container\">\n\n        </div>\n    )\n}\n\nexport default Messages;"],"mappings":"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"},"metadata":{},"sourceType":"module"}