{"ast":null,"code":"var _jsxFileName = \"/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B';\n\nconst Messages = props => {\n  _s();\n\n  const {\n    token,\n    userName,\n    setPostID,\n    postArray,\n    setPostIndex\n  } = props;\n  const history = useHistory();\n\n  const fetchPosts = async () => {\n    try {\n      const posts = await fetch(`${API_URL}/posts`);\n      const postsResults = await posts.json();\n      return postsResults.data.posts;\n    } catch (err) {\n      console.error('Unable to fetch posts', err);\n    }\n  };\n\n  const posts = awai;\n\n  const getMessages = async () => {\n    try {\n      const messages = await fetch(`${API_URL}/users/me`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const messagesResults = await messages.json();\n      return messagesResults.data.messages;\n    } catch (err) {\n      console.error('Unable to fetch messages', err);\n    }\n  };\n\n  const renderMessages = messageList => {\n    let messageContainer = document.getElementById('message-container');\n\n    if (!messageList || messageList.length === 0) {\n      messageContainer.innerHTML = \"No messages to display.\";\n    }\n\n    let messageContainerHTML = '';\n\n    for (let i = 0; i < messageList.length; i++) {\n      const message = messageList[i];\n      let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-header'>\n                    <div class='sm-title'>\n                        <h2>${message.post.title}</h2>\n                    </div>\n                    <div class='sm-button'>\n                        <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                    </div>\n                </div>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n      messageContainerHTML += messageHTML;\n    }\n\n    messageContainer.innerHTML = messageContainerHTML;\n    let viewMessagePostButton = [...document.getElementsByClassName('sm-view')];\n\n    for (let x = 0; x < viewMessagePostButton.length; x++) {\n      const button1 = viewMessagePostButton[x];\n      button1.addEventListener('click', () => {\n        console.log(postArray);\n        setPostID(button1.dataset.id);\n\n        for (let k = 0; k < postArray.length; k++) {\n          let currentObject = postArray[k];\n\n          if (currentObject._id === button1.dataset.id) {\n            setPostIndex(k);\n            history.push('/viewPost');\n          }\n        }\n      });\n    }\n  };\n\n  const initialMessages = async () => {\n    const messages = await getMessages();\n    renderMessages(messages);\n  };\n\n  initialMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"message-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Messages, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useHistory","API_URL","Messages","props","token","userName","setPostID","postArray","setPostIndex","history","fetchPosts","posts","fetch","postsResults","json","data","err","console","error","awai","getMessages","messages","headers","messagesResults","renderMessages","messageList","messageContainer","document","getElementById","length","innerHTML","messageContainerHTML","i","message","messageHTML","post","title","_id","fromUser","username","content","viewMessagePostButton","getElementsByClassName","x","button1","addEventListener","log","dataset","id","k","currentObject","push","initialMessages"],"sources":["/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js"],"sourcesContent":["import { useHistory } from \"react-router-dom\";\n\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B'\n\nconst Messages = (props) => {\n    const { token, userName, setPostID, postArray, setPostIndex } = props;\n    const history = useHistory();\n\n    const fetchPosts = async () => {\n        try {\n            const posts = await fetch(`${API_URL}/posts`);\n            const postsResults = await posts.json();\n            return postsResults.data.posts;\n\n        } catch (err) {\n            console.error('Unable to fetch posts', err);\n        }\n    }\n\n    const posts = awai\n\n    const getMessages = async () => {\n        try {\n            const messages = await fetch(`${API_URL}/users/me`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },})\n            const messagesResults = await messages.json();\n            return messagesResults.data.messages;\n        } catch (err) {\n            console.error('Unable to fetch messages', err);\n        }\n    }\n\n    const renderMessages = (messageList) => {    \n        let messageContainer = document.getElementById('message-container')\n\n        if (!messageList || messageList.length === 0) {\n            messageContainer.innerHTML = \"No messages to display.\"\n        }\n\n        let messageContainerHTML = '';\n        for (let i = 0; i < messageList.length; i++) {\n            const message = messageList[i];\n\n            let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-header'>\n                    <div class='sm-title'>\n                        <h2>${message.post.title}</h2>\n                    </div>\n                    <div class='sm-button'>\n                        <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                    </div>\n                </div>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n\n            messageContainerHTML += messageHTML;\n        }\n        messageContainer.innerHTML = messageContainerHTML;\n\n        let viewMessagePostButton = [...document.getElementsByClassName('sm-view')]\n        for (let x = 0; x < viewMessagePostButton.length; x++) {\n            const button1 = viewMessagePostButton[x];\n            button1.addEventListener('click', () => {\n                console.log(postArray)\n                setPostID(button1.dataset.id);\n                for (let k = 0; k < postArray.length; k++) {\n                    let currentObject = postArray[k]\n                    if (currentObject._id === button1.dataset.id) {\n                        setPostIndex(k)\n                        history.push('/viewPost')\n                    }\n                }\n            });\n        }\n\n    }\n\n    const initialMessages = async () => {\n        const messages = await getMessages();\n        renderMessages(messages)\n    }\n\n    initialMessages();\n\n    return (\n        <div id=\"message-container\">\n\n        </div>\n    )\n}\n\nexport default Messages;"],"mappings":"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"},"metadata":{},"sourceType":"module"}