{"ast":null,"code":"var _jsxFileName = \"/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B';\n\nconst Messages = props => {\n  _s();\n\n  const {\n    token,\n    userName,\n    setPostID\n  } = props;\n  const history = useHistory();\n\n  const getMessages = async () => {\n    try {\n      const messages = await fetch(`${API_URL}/users/me`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const messagesResults = await messages.json();\n      return messagesResults.data.messages;\n    } catch (err) {\n      console.error('Unable to fetch messages', err);\n    }\n  };\n\n  const renderMessages = messageList => {\n    let messageContainer = document.getElementById('message-container');\n    console.log(messageList);\n\n    if (!messageList || messageList.length === 0) {\n      messageContainer.innerHTML = \"No messages to display.\";\n    }\n\n    let messageContainerHTML = '';\n\n    for (let i = 0; i < messageList.length; i++) {\n      const message = messageList[i];\n      let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-post'>\n                    <a href='/viewPost' id=\"sm-anchor\">View Post: ${message.post.title}</a>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n      messageContainerHTML += messageHTML;\n    }\n\n    let viewPostAnchors = [...document.getElementsByClassName('sm-anchor')];\n\n    for (let j = 0; j < viewPostButtons.length; j++) {\n      const button = viewPostButtons[j];\n      button.addEventListener('click', () => {\n        if (userName) {\n          setPostID(button.dataset.id);\n          setPostIndex(j);\n          history.push('/viewPost');\n        } else {\n          setAlertMessage(\"You must be logged in to send a message.\");\n          history.push('/login');\n        }\n      });\n    }\n\n    messageContainer.innerHTML = messageContainerHTML;\n  };\n\n  const initialMessages = async () => {\n    const messages = await getMessages();\n    renderMessages(messages);\n  };\n\n  initialMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"message-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Messages, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useHistory","API_URL","Messages","props","token","userName","setPostID","history","getMessages","messages","fetch","headers","messagesResults","json","data","err","console","error","renderMessages","messageList","messageContainer","document","getElementById","log","length","innerHTML","messageContainerHTML","i","message","messageHTML","fromUser","username","post","title","content","viewPostAnchors","getElementsByClassName","j","viewPostButtons","button","addEventListener","dataset","id","setPostIndex","push","setAlertMessage","initialMessages"],"sources":["/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js"],"sourcesContent":["import { useHistory } from \"react-router-dom\";\n\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B'\n\nconst Messages = (props) => {\n    const { token, userName, setPostID } = props;\n    const history = useHistory();\n\n    const getMessages = async () => {\n        try {\n            const messages = await fetch(`${API_URL}/users/me`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },})\n            const messagesResults = await messages.json();\n            return messagesResults.data.messages;\n        } catch (err) {\n            console.error('Unable to fetch messages', err);\n        }\n    }\n\n    const renderMessages = (messageList) => {    \n        let messageContainer = document.getElementById('message-container')\n\n        console.log(messageList)\n\n        if (!messageList || messageList.length === 0) {\n            messageContainer.innerHTML = \"No messages to display.\"\n        }\n\n        let messageContainerHTML = '';\n        for (let i = 0; i < messageList.length; i++) {\n            const message = messageList[i];\n\n            let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username !== userName ? message.fromUser.username : \"ME\"}</h3>\n                </div>\n                <div class='sm-post'>\n                    <a href='/viewPost' id=\"sm-anchor\">View Post: ${message.post.title}</a>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n\n            messageContainerHTML += messageHTML;\n        }\n\n        let viewPostAnchors = [...document.getElementsByClassName('sm-anchor')]\n        for (let j = 0; j < viewPostButtons.length; j++) {\n            const button = viewPostButtons[j];\n            button.addEventListener('click', () => {\n                if (userName) {\n                    setPostID(button.dataset.id)\n                    setPostIndex(j)\n                    history.push('/viewPost')\n                } else {\n                    setAlertMessage(\"You must be logged in to send a message.\")\n                    history.push('/login')\n                }\n            });\n        }\n        messageContainer.innerHTML = messageContainerHTML;\n\n    }\n\n    const initialMessages = async () => {\n        const messages = await getMessages();\n        renderMessages(messages)\n    }\n\n    initialMessages();\n\n    return (\n        <div id=\"message-container\">\n\n        </div>\n    )\n}\n\nexport default Messages;"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,OAAO,GAAG,iEAAhB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EACxB,MAAM;IAAEC,KAAF;IAASC,QAAT;IAAmBC;EAAnB,IAAiCH,KAAvC;EACA,MAAMI,OAAO,GAAGP,UAAU,EAA1B;;EAEA,MAAMQ,WAAW,GAAG,YAAY;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,OAAQ,WAAZ,EAAwB;QAChDU,OAAO,EAAE;UACL,gBAAgB,kBADX;UAEL,iBAAkB,UAASP,KAAM;QAF5B;MADuC,CAAxB,CAA5B;MAKA,MAAMQ,eAAe,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA9B;MACA,OAAOD,eAAe,CAACE,IAAhB,CAAqBL,QAA5B;IACH,CARD,CAQE,OAAOM,GAAP,EAAY;MACVC,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CF,GAA1C;IACH;EACJ,CAZD;;EAcA,MAAMG,cAAc,GAAIC,WAAD,IAAiB;IACpC,IAAIC,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAvB;IAEAN,OAAO,CAACO,GAAR,CAAYJ,WAAZ;;IAEA,IAAI,CAACA,WAAD,IAAgBA,WAAW,CAACK,MAAZ,KAAuB,CAA3C,EAA8C;MAC1CJ,gBAAgB,CAACK,SAAjB,GAA6B,yBAA7B;IACH;;IAED,IAAIC,oBAAoB,GAAG,EAA3B;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACK,MAAhC,EAAwCG,CAAC,EAAzC,EAA6C;MACzC,MAAMC,OAAO,GAAGT,WAAW,CAACQ,CAAD,CAA3B;MAEA,IAAIE,WAAW,GAAI;AAC/B;AACA;AACA,gCAAgCD,OAAO,CAACE,QAAR,CAAiBC,QAAjB,KAA8B1B,QAA9B,GAAyCuB,OAAO,CAACE,QAAR,CAAiBC,QAA1D,GAAqE,IAAK;AAC1G;AACA;AACA,oEAAoEH,OAAO,CAACI,IAAR,CAAaC,KAAM;AACvF;AACA;AACA,kCAAkCL,OAAO,CAACM,OAAQ;AAClD;AACA,mBAXY;MAaAR,oBAAoB,IAAIG,WAAxB;IACH;;IAED,IAAIM,eAAe,GAAG,CAAC,GAAGd,QAAQ,CAACe,sBAAT,CAAgC,WAAhC,CAAJ,CAAtB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,eAAe,CAACd,MAApC,EAA4Ca,CAAC,EAA7C,EAAiD;MAC7C,MAAME,MAAM,GAAGD,eAAe,CAACD,CAAD,CAA9B;MACAE,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;QACnC,IAAInC,QAAJ,EAAc;UACVC,SAAS,CAACiC,MAAM,CAACE,OAAP,CAAeC,EAAhB,CAAT;UACAC,YAAY,CAACN,CAAD,CAAZ;UACA9B,OAAO,CAACqC,IAAR,CAAa,WAAb;QACH,CAJD,MAIO;UACHC,eAAe,CAAC,0CAAD,CAAf;UACAtC,OAAO,CAACqC,IAAR,CAAa,QAAb;QACH;MACJ,CATD;IAUH;;IACDxB,gBAAgB,CAACK,SAAjB,GAA6BC,oBAA7B;EAEH,CA7CD;;EA+CA,MAAMoB,eAAe,GAAG,YAAY;IAChC,MAAMrC,QAAQ,GAAG,MAAMD,WAAW,EAAlC;IACAU,cAAc,CAACT,QAAD,CAAd;EACH,CAHD;;EAKAqC,eAAe;EAEf,oBACI;IAAK,EAAE,EAAC;EAAR;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA7ED;;GAAM5C,Q;UAEcF,U;;;KAFdE,Q;AA+EN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}