{"ast":null,"code":"var _jsxFileName = \"/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B';\n\nconst Messages = props => {\n  _s();\n\n  const {\n    token,\n    userName,\n    setPostID,\n    setPostIndex\n  } = props;\n  const history = useHistory();\n\n  const fetchPosts = async () => {\n    try {\n      const posts = await fetch(`${API_URL}/posts`);\n      const postsResults = await posts.json(); // console.log(postsResults.data.posts)\n\n      return postsResults.data.posts;\n    } catch (err) {\n      console.error('Unable to fetch posts', err);\n    }\n  };\n\n  const getMessages = async () => {\n    try {\n      const messages = await fetch(`${API_URL}/users/me`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const messagesResults = await messages.json();\n      return messagesResults.data.messages;\n    } catch (err) {\n      console.error('Unable to fetch messages', err);\n    }\n  };\n\n  const renderMessages = messageList => {\n    let messageContainer = document.getElementById('message-container');\n\n    if (!messageList || messageList.length === 0) {\n      messageContainer.innerHTML = \"No messages to display.\";\n    }\n\n    let messageContainerHTML = '';\n\n    for (let i = 0; i < messageList.length; i++) {\n      const message = messageList[i];\n      let inboxHTML = \"\";\n      let sentHTML = \"\";\n      let messageHTML = `\n            <div class='inbox'>\n            <h2>Inbox</h2>\n            ${inboxHTML}\n            </div>\n            <div class='sent'>\n            <h2>Sent</h2>\n            ${sentHTML}\n            </div>`;\n\n      if (message.fromUser.username !== userName) {\n        messageHTML = `\n                <h2>Inbox</h2>\n                <div class='single-message'>\n                    <div class='sm-header'>\n                        <div class='sm-title'>\n                            <h2>${message.post.title}</h2>\n                        </div>\n                        <div class='sm-button'>\n                            <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                        </div>\n                    </div>\n                    <div class='sm-content'>\n                        <p>${message.content}</p>\n                    </div>\n                    <div class='sm-author'>\n                        <h3>From: ${message.fromUser.username}</h3>\n                    </div>\n                </div>`;\n      } else {\n        messageHTML = `\n                <h2>Sent</h2>\n                <div class='single-message'>\n                    <div class='sm-header'>\n                        <div class='sm-title'>\n                            <h2>${message.post.title}</h2>\n                        </div>\n                        <div class='sm-button'>\n                            <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                        </div>\n                    </div>\n                    <div class='sm-content'>\n                        <p>${message.content}</p>\n                    </div>\n                    <div class='sm-author'>\n                        <h3>From: ME</h3>\n                    </div>\n                </div>`;\n      }\n\n      ;\n      messageContainerHTML += messageHTML;\n    }\n\n    messageContainer.innerHTML = messageContainerHTML;\n    let viewMessagePostButton = [...document.getElementsByClassName('sm-view')];\n\n    for (let x = 0; x < viewMessagePostButton.length; x++) {\n      const button1 = viewMessagePostButton[x];\n      button1.addEventListener('click', () => {\n        setPostID(button1.dataset.id);\n        fetchPosts().then(result => {\n          for (let k = 0; k < result.length; k++) {\n            let currentObject = result[k];\n\n            if (currentObject._id === button1.dataset.id) {\n              setPostIndex(k);\n              history.push('/viewPost');\n            }\n          }\n        });\n      });\n    }\n  };\n\n  const initialMessages = async () => {\n    const messages = await getMessages();\n    renderMessages(messages);\n  };\n\n  initialMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"message-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Messages, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useHistory","API_URL","Messages","props","token","userName","setPostID","setPostIndex","history","fetchPosts","posts","fetch","postsResults","json","data","err","console","error","getMessages","messages","headers","messagesResults","renderMessages","messageList","messageContainer","document","getElementById","length","innerHTML","messageContainerHTML","i","message","inboxHTML","sentHTML","messageHTML","fromUser","username","post","title","_id","content","viewMessagePostButton","getElementsByClassName","x","button1","addEventListener","dataset","id","then","result","k","currentObject","push","initialMessages"],"sources":["/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js"],"sourcesContent":["import { useHistory } from \"react-router-dom\";\n\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B'\n\nconst Messages = (props) => {\n    const { token, userName, setPostID, setPostIndex } = props;\n    const history = useHistory();\n\n    const fetchPosts = async () => {\n        try {\n            const posts = await fetch(`${API_URL}/posts`);\n            const postsResults = await posts.json();\n            // console.log(postsResults.data.posts)\n            return postsResults.data.posts;\n\n        } catch (err) {\n            console.error('Unable to fetch posts', err);\n        }\n    }\n\n    const getMessages = async () => {\n        try {\n            const messages = await fetch(`${API_URL}/users/me`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },})\n            const messagesResults = await messages.json();\n            return messagesResults.data.messages;\n        } catch (err) {\n            console.error('Unable to fetch messages', err);\n        }\n    }\n\n    const renderMessages = (messageList) => {    \n        let messageContainer = document.getElementById('message-container')\n\n        if (!messageList || messageList.length === 0) {\n            messageContainer.innerHTML = \"No messages to display.\"\n        }\n\n        let messageContainerHTML = '';\n        for (let i = 0; i < messageList.length; i++) {\n            const message = messageList[i];\n            let inboxHTML = \"\";\n            let sentHTML = \"\";\n            let messageHTML = `\n            <div class='inbox'>\n            <h2>Inbox</h2>\n            ${inboxHTML}\n            </div>\n            <div class='sent'>\n            <h2>Sent</h2>\n            ${sentHTML}\n            </div>`\n            if (message.fromUser.username !== userName) {\n                messageHTML = `\n                <h2>Inbox</h2>\n                <div class='single-message'>\n                    <div class='sm-header'>\n                        <div class='sm-title'>\n                            <h2>${message.post.title}</h2>\n                        </div>\n                        <div class='sm-button'>\n                            <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                        </div>\n                    </div>\n                    <div class='sm-content'>\n                        <p>${message.content}</p>\n                    </div>\n                    <div class='sm-author'>\n                        <h3>From: ${message.fromUser.username}</h3>\n                    </div>\n                </div>`\n            } else {\n                messageHTML = `\n                <h2>Sent</h2>\n                <div class='single-message'>\n                    <div class='sm-header'>\n                        <div class='sm-title'>\n                            <h2>${message.post.title}</h2>\n                        </div>\n                        <div class='sm-button'>\n                            <button class=\"sm-view\" data-id=${message.post._id}>View Post</button>\n                        </div>\n                    </div>\n                    <div class='sm-content'>\n                        <p>${message.content}</p>\n                    </div>\n                    <div class='sm-author'>\n                        <h3>From: ME</h3>\n                    </div>\n                </div>`\n            }\n            ;\n\n            messageContainerHTML += messageHTML;\n        }\n        messageContainer.innerHTML = messageContainerHTML;\n\n        let viewMessagePostButton = [...document.getElementsByClassName('sm-view')]\n        for (let x = 0; x < viewMessagePostButton.length; x++) {\n            const button1 = viewMessagePostButton[x];\n            button1.addEventListener('click', () => {\n                setPostID(button1.dataset.id);\n                fetchPosts().then((result) => {\n                    for (let k = 0; k < result.length; k++) {\n                        let currentObject = result[k]\n                        if (currentObject._id === button1.dataset.id) {\n                            setPostIndex(k)\n                            history.push('/viewPost')\n                        }\n                    }\n                })\n            });\n        }\n\n    }\n\n    const initialMessages = async () => {\n        const messages = await getMessages();\n        renderMessages(messages)\n    }\n\n    initialMessages();\n\n    return (\n        <div id=\"message-container\">\n\n        </div>\n    )\n}\n\nexport default Messages;"],"mappings":"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"},"metadata":{},"sourceType":"module"}