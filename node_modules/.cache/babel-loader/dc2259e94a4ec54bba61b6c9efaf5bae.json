{"ast":null,"code":"var _jsxFileName = \"/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B';\n\nconst Messages = props => {\n  const {\n    token,\n    userName\n  } = props;\n\n  const getMessages = async () => {\n    try {\n      const messages = await fetch(`${API_URL}/users/me`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const messagesResults = await messages.json();\n      return messagesResults.data.messages;\n    } catch (err) {\n      console.error('Unable to fetch messages', err);\n    }\n  };\n\n  const renderMessages = messageList => {\n    let messageContainer = document.getElementById('message-container');\n\n    if (!messageList) {\n      messageContainer.innerHTML = \"No messages to display.\";\n    }\n\n    let messageContainerHTML = '';\n\n    for (let i = 0; i < messageList.length; i++) {\n      const message = messageList[i];\n      console.log(message.content);\n      let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username}</h3>\n                </div>\n                <div class='sm-post'>\n                    <p>Post: ${message.post.title}</p>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n      messageContainerHTML += messageHTML;\n    }\n\n    messageContainer.innerHTML = messageContainerHTML;\n  };\n\n  const initialMessages = async () => {\n    const messages = await getMessages();\n    renderMessages(messages);\n  };\n\n  initialMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"message-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["API_URL","Messages","props","token","userName","getMessages","messages","fetch","headers","messagesResults","json","data","err","console","error","renderMessages","messageList","messageContainer","document","getElementById","innerHTML","messageContainerHTML","i","length","message","log","content","messageHTML","fromUser","username","post","title","initialMessages"],"sources":["/Users/annamahlberg/Documents/Bootcamp/course_work/project_09/strangerThings/src/messages.js"],"sourcesContent":["const API_URL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-FT-B'\n\nconst Messages = (props) => {\n    const { token, userName } = props;\n\n    const getMessages = async () => {\n        try {\n            const messages = await fetch(`${API_URL}/users/me`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },})\n            const messagesResults = await messages.json();\n            return messagesResults.data.messages;\n        } catch (err) {\n            console.error('Unable to fetch messages', err);\n        }\n    }\n\n    const renderMessages = (messageList) => {    \n        let messageContainer = document.getElementById('message-container')\n\n        if (!messageList) {\n            messageContainer.innerHTML = \"No messages to display.\"\n        }\n\n        let messageContainerHTML = '';\n        for (let i = 0; i < messageList.length; i++) {\n            const message = messageList[i];\n            console.log(message.content)\n\n            let messageHTML = `\n            <div class='single-message'>\n                <div class='sm-author'>\n                    <h3>From: ${message.fromUser.username }</h3>\n                </div>\n                <div class='sm-post'>\n                    <p>Post: ${message.post.title}</p>\n                </div>\n                <div class='sm-content'>\n                    <p>Message: ${message.content}</p>\n                </div>\n            </div>`;\n\n            messageContainerHTML += messageHTML;\n        }\n        messageContainer.innerHTML = messageContainerHTML;\n\n    }\n\n    const initialMessages = async () => {\n        const messages = await getMessages();\n        renderMessages(messages)\n    }\n\n    initialMessages();\n\n    return (\n        <div id=\"message-container\">\n\n        </div>\n    )\n}\n\nexport default Messages;"],"mappings":";;AAAA,MAAMA,OAAO,GAAG,iEAAhB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EACxB,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBF,KAA5B;;EAEA,MAAMG,WAAW,GAAG,YAAY;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,OAAQ,WAAZ,EAAwB;QAChDQ,OAAO,EAAE;UACL,gBAAgB,kBADX;UAEL,iBAAkB,UAASL,KAAM;QAF5B;MADuC,CAAxB,CAA5B;MAKA,MAAMM,eAAe,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA9B;MACA,OAAOD,eAAe,CAACE,IAAhB,CAAqBL,QAA5B;IACH,CARD,CAQE,OAAOM,GAAP,EAAY;MACVC,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CF,GAA1C;IACH;EACJ,CAZD;;EAcA,MAAMG,cAAc,GAAIC,WAAD,IAAiB;IACpC,IAAIC,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAvB;;IAEA,IAAI,CAACH,WAAL,EAAkB;MACdC,gBAAgB,CAACG,SAAjB,GAA6B,yBAA7B;IACH;;IAED,IAAIC,oBAAoB,GAAG,EAA3B;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAAW,CAACO,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;MACzC,MAAME,OAAO,GAAGR,WAAW,CAACM,CAAD,CAA3B;MACAT,OAAO,CAACY,GAAR,CAAYD,OAAO,CAACE,OAApB;MAEA,IAAIC,WAAW,GAAI;AAC/B;AACA;AACA,gCAAgCH,OAAO,CAACI,QAAR,CAAiBC,QAAU;AAC3D;AACA;AACA,+BAA+BL,OAAO,CAACM,IAAR,CAAaC,KAAM;AAClD;AACA;AACA,kCAAkCP,OAAO,CAACE,OAAQ;AAClD;AACA,mBAXY;MAaAL,oBAAoB,IAAIM,WAAxB;IACH;;IACDV,gBAAgB,CAACG,SAAjB,GAA6BC,oBAA7B;EAEH,CA7BD;;EA+BA,MAAMW,eAAe,GAAG,YAAY;IAChC,MAAM1B,QAAQ,GAAG,MAAMD,WAAW,EAAlC;IACAU,cAAc,CAACT,QAAD,CAAd;EACH,CAHD;;EAKA0B,eAAe;EAEf,oBACI;IAAK,EAAE,EAAC;EAAR;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA5DD;;KAAM/B,Q;AA8DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}